/*
 * File: app/controller/ManageUser.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('W3D5_Project.controller.ManageUser', {
    extend: 'Ext.app.Controller',

    id: 'ManageUser',

    onUserCreateClick: function() {
        var controller = W3D5_Project.app.getController('ManageUser');
        var store = Ext.getStore('UserStore');
        var book = controller.getUserFormValues();
        store.add(user);
        controller.resetFormValues();
    },

    onUserUpdateClick: function() {
        var controller = W3D5_Project.app.getController('ManageUser');
        var store = Ext.getStore('UserStore');
        var book = controller.getUserFormValues();
        var id = Ext.getCmp('id').getValue();
        var grid = Ext.getCmp('userinfogrid');

        if(Ext.isEmpty(id)){
            Ext.Msg.show({
            title:'Status',
            msg: 'Please select a record to update.',
            buttons: Ext.Msg.OK,
            icon: Ext.Msg.WARNING
        });
        }else{
           Ext.each(store.data.items, function(rec){
            if(rec.data.id == id){
                rec.data.fname = user.fname;
                rec.data.lname = user.lname;
                rec.data.email = user.email;
                rec.data.address = user.add;
                rec.data.username = user.username;
                rec.data.password = user.password;
            }
        });
        }

        grid.getView().refresh();
        controller.UserResetFormValues();
    },

    onUserDeleteClick: function() {
                var controller = W3D5_Project.app.getController('ManageUser');
                var store = Ext.getStore('UserStore');
                var id = Ext.getCmp('id').getValue();

                if(Ext.isEmpty(id)){
                    Ext.Msg.show({
                    title:'',
                    msg: 'Please select a record to delete.',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.WARNING
                });
                }else{
                   Ext.each(store.data.items, function(rec){
                    if(rec.data.id == id){
                        controller.UserResetFormValues();
                        store.remove(rec);
                    }
                  });
                }
    },

    onUserResetFormClick: function() {
        var controller = W3D5_Project.app.getController('ManageUser');
        controller.UserResetFormValues();
    },

    onUserSearchClick: function() {
        var searchVal = Ext.getCmp('UserSearchBar').getValue();
         var store = Ext.getStore('UserStore');
        if(Ext.isEmpty(searchVal)){
            store.clearFilter();
        }else{
            store.filter('userfname', searchVal);
        }
    },

    onUserResetSearchClick: function() {

    },

    onUserinfogridSelectionChange: function() {
        var controller = W3D5_Project.app.getController('ManageUser');
        var grid = Ext.getCmp('userinfogrid');
        var selected = grid.getSelectionModel().selected.items[0].data;
        controller.setUserFormValues(selected);
    },

    getUserFormValues: function() {
        var store = Ext.getStore('UserStore');
        var fname = Ext.getCmp('fname').getValue();
        var lname = Ext.getCmp('lname').getValue();
        var email = Ext.getCmp('email').getValue();
        var address = Ext.getCmp('address').getValue();
        var username = Ext.getCmp('username').getValue();
        var password = Ext.getCmp('password').getValue();


        if (store.getCount() > 0)
        {
            var maxId = store.getAt(0).get('id'); // initialise to the first record's id value.
            store.each(function(rec) // go through all the records
                       {
                           maxId = Math.max(maxId, rec.get('id'));
                       });
        }

        id = maxId + 1;


        var user = {
            "fname":"fname",
            "lname":"lname",
            "email":"email",
            "address":"address",
            "username":"username",
            "password":"password"
        };

        return user;

    },

    setUserFormValues: function(user) {

        Ext.getCmp('userfname').setValue(user.fname);
        Ext.getCmp('userlname').setValue(user.lname);
        Ext.getCmp('useremail').setValue(user.email);
        Ext.getCmp('userusername').setValue(user.userName);
        Ext.getCmp('userpassword').setValue(user.password);
        Ext.getCmp('useraddress').setValue(user.add);


    },

    UserResetFormValues: function() {
        Ext.getCmp('fname').setValue('');
        Ext.getCmp('lname').setValue('');
        Ext.getCmp('email').setValue('');
        Ext.getCmp('username').setValue('');
        Ext.getCmp('password').setValue('');
        Ext.getCmp('address').setValue('');


    },

    init: function(application) {
        this.control({
            "#UserCreate": {
                click: this.onUserCreateClick
            },
            "#UserUpdate": {
                click: this.onUserUpdateClick
            },
            "#UserDelete": {
                click: this.onUserDeleteClick
            },
            "#UserResetForm": {
                click: this.onUserResetFormClick
            },
            "#UserResetSearch": {
                click: this.onUserSearchClick,
                click: this.onUserResetSearchClick
            },
            "#userinfogrid": {
                selectionchange: this.onUserinfogridSelectionChange
            }
        });
    }

});
