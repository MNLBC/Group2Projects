/*
 * File: app/controller/ProductController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('W6D5_Project.controller.ProductController', {
    extend: 'Ext.app.Controller',

    id: 'productController',

    control: {
        "#prodSearchField": {
            change: 'onSearchProduct'
        },
        "#prodGrid": {
            selectionchange: 'onProductGridSelect'
        },
        "#btnProdUpdate": {
            click: 'onUpdateProduct'
        },
        "#btnProdDelete": {
            click: 'onDeleteProduct'
        },
        "#btnProdCreate": {
            click: 'onCreateProduct'
        },
        "#resetFormButton": {
            click: 'onProductResetClick'
        },
        "#mygridview": {
            rowdblclick: 'onProductDoubleClick'
        },
        "#prodSaleField": {
            change: 'onProductSaleChange'
        }
    },

    onSearchProduct: function(field, newValue, oldValue, eOpts) {
        var searchString,prodStore;

        searchString = Ext.getCmp('prodSearchField').getValue();
        prodStore = Ext.getStore('ProductStore');

        if(Ext.isEmpty(searchString)){
            prodStore.clearFilter();
        }else{
            prodStore.filter('prodName',searchString);
        }


    },

    onProductGridSelect: function(model, selected, eOpts) {
        var selected;
        this.selected = selected;

        Ext.getCmp('prodIDField').setValue(selected[0].data.prodId);
        Ext.getCmp('prodNameField').setValue(selected[0].data.prodName);
        Ext.getCmp('prodCatField').setValue(selected[0].data.prodCat);
        Ext.getCmp('prodDescField').setValue(selected[0].data.prodDesc);
        Ext.getCmp('prodPriceField').setValue(selected[0].data.prodPrice);
        Ext.getCmp('prodSaleField').setValue(selected[0].data.prodSale);
        Ext.getCmp('prodStockField').setValue(selected[0].data.prodStock);
        Ext.getCmp('prodImageField').setValue(selected[0].data.prodImg);
    },

    onUpdateProduct: function(button, e, eOpts) {
        var prodStore;
        var prodId,prodName,prodCat,prodDesc,prodPrice,prodSale,prodStock,prodImg;

        prodId = Ext.getCmp('prodIDField').getValue();
        prodName = Ext.getCmp('prodNameField').getValue();
        prodCat = Ext.getCmp('prodCatField').getValue();
        prodDesc = Ext.getCmp('prodDescField').getValue();
        prodPrice = Ext.getCmp('prodPriceField').getValue();
        prodSale = Ext.getCmp('prodSaleField').getValue();
        prodStock = Ext.getCmp('prodStockField').getValue();
        prodImg = Ext.getCmp('prodImageField').getValue();

        prodStore = Ext.getStore('ProductStore');

        Ext.each(prodStore.data.items,function(rec){
           if(prodId == rec.data.prodId){
               rec.data.prodName = prodName;
               rec.data.prodCat = prodCat;
               rec.data.prodDesc = prodDesc;
               rec.data.prodPrice = prodPrice;
               rec.data.prodSale = prodSale;
               rec.data.prodStock = prodStock;
               rec.data.prodImg = prodImg;
           }
        });

        Ext.getCmp('prodGrid').getView().refresh();
        Ext.getCmp('productPanel').getForm().reset();
        Ext.Msg.alert('Success', 'Record successfully updated!');
    },

    onDeleteProduct: function(button, e, eOpts) {
        var selected,prodStore,prodId,
            cartCount = Ext.getCmp('cartCount'),
            recordToDelete='';
        this.selected = selected;

        prodStore = Ext.getStore('ProductStore');

        prodId = Ext.getCmp('prodGrid').getSelectionModel().selected.items[0].data.prodId;

        Ext.each(prodStore.data.items,function(record){
           if(prodId == record.data.prodId){
               recordToDelete = record;
           }
        });

        if(!isEmpty(recordToDelete)){
            Ext.Msg.alert('Success', 'Record successfully deleted!');
               Ext.getCmp('productPanel').getForm().reset();
               prodStore.remove(recordToDelete);
        }
    },

    onCreateProduct: function(button, e, eOpts) {
        var prodStore,validSale;
        var maxId,prodId,prodName,prodCat,prodDesc,prodPrice,prodSale,prodStock,prodImg,prodObj;

        prodName = Ext.getCmp('prodNameField').getValue();
        prodCat = Ext.getCmp('prodCatField').getValue();
        prodDesc = Ext.getCmp('prodDescField').getValue();
        prodPrice = Ext.getCmp('prodPriceField').getValue();
        prodSale = Ext.getCmp('prodSaleField').getValue();
        prodStock = Ext.getCmp('prodStockField').getValue();
        prodImg = Ext.getCmp('prodImageField').getValue();
        prodStore = Ext.getStore('ProductStore');

        if(prodSale == '0'){
            prodSale = 1;
        }
        if(prodSale > 1){
            validSale = false;
        }

        if (prodStore.getCount() > 0)
        {
            maxId = prodStore.getAt(0).get('prodId'); // initialise to the first record's id value.
            prodStore.each(function(rec) // go through all the records
                       {
                           maxId = Math.max(maxId, rec.get('prodId'));
                       });
        }

        prodId = maxId + 1;

        form = Ext.getCmp('productPanel');
        prodObj = [{
            prodId : prodId,
            prodName : prodName,
            prodCat : prodCat,
            prodDesc : prodDesc,
            prodPrice : prodPrice,
            prodSale : prodSale,
            prodStock : prodStock,
            prodImg : prodImg
        }];

        if(form.isValid()&&validSale === true){
            if (prodPrice > 0){
                if(prodSale > 0){
                    if(prodStock > 0){
                        prodStore.add(prodObj);
                        Ext.Msg.alert('Success', 'Product added successfully!');
                        Ext.getCmp('productPanel').getForm().reset();
                    }
                    else{
                        Ext.Msg.alert('Warning', 'Invalid value for stock');
                        Ext.getCmp('prodStockField').markInvalid('Invalid stock');
                    }

                }else{
                    Ext.Msg.alert('Warning', 'Invalid value for sale');
                    Ext.getCmp('prodSaleField').markInvalid('Invalid sale value e.g.(1,0.75,0.5)');
                }

            }else{
                Ext.Msg.alert('Warning', 'Invalid value for price');
                Ext.getCmp('prodPriceField').markInvalid('Invalid price');
            }

        }else if(validSale === false){
            Ext.Msg.alert('Warning', 'Invalid value for sale');
            Ext.getCmp('prodSaleField').markInvalid('Values range from 0.01 to 1 only');
        }
        else{
            Ext.Msg.alert('Warning', 'Please input required fields');
        }
    },

    onProductResetClick: function(button, e, eOpts) {
        Ext.getCmp('productPanel').getForm().reset();
    },

    onProductDoubleClick: function(tableview, record, tr, rowIndex, e, eOpts) {
        var prodWindow = Ext.create('W5D5_Project.view.ProductImageWindow');
        Ext.getCmp('productImage').setSrc('resources/img/' +record.data.prodImg + '.png');
        prodWindow.setTitle(record.data.prodName);
        prodWindow.show();

    },

    onProductSaleChange: function(field, newValue, oldValue, eOpts) {
        var prodSale = Ext.getCmp('prodSaleField').getValue();
        if(prodSale > 1){
            Ext.getCmp('prodSaleField').markInvalid('Values range from 0.01 to 1 only');
        }
    }

});
