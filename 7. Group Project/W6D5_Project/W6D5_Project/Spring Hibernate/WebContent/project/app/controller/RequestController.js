/*
 * File: app/controller/RequestController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('W5D5_Project.controller.RequestController', {
    extend: 'Ext.app.Controller',

    id: 'requestController',

    control: {
        "#reqApproveBtn": {
            click: 'onReqApproveBtnClick'
        },
        "#reqRejectBtn": {
            click: 'onReqRejectBtnClick'
        },
        "#mygridpanel2": {
            selectionchange: 'onRequestGridSelectionChange'
        }
    },

    onReqApproveBtnClick: function() {
        Ext.Ajax.request({
                    url : "getUserByEmail",
                    method: 'GET',
                    params : {
                        email: gridEmail
                    },
                    async: false,
                    jsonData: Ext.util.JSON.encode(user),
                    callback : function(options, success, response){
                        if (Ext.isEmpty(response.responseText)) {
                             Ext.Msg.alert("Users","Error in getting Users");
                             console.log('Failed ');
                        } else {
                             console.log('Success! ');
                             userStore = Ext.getStore('UserStore');
                             var jsonResponse = Ext.JSON.decode(response.responseText);
                             userStore.loadData(jsonResponse);
                        }
                    }
                });
    },

    onReqRejectBtnClick: function() {

    },

    onRequestGridSelectionChange: function(model, selected, eOpts) {
        var selected,userStore;
        this.selected = selected;
        var gridEmail = selected[0].data.userEmail;
        Ext.Ajax.request({
            url : "getUserByEmail",
            method: 'GET',
            params : {
                email: gridEmail
            },
            async: false,
            jsonData: Ext.util.JSON.encode(user),
            callback : function(options, success, response){
                if (Ext.isEmpty(response.responseText)) {
                     Ext.Msg.alert("Users","Error in getting Users");
                     console.log('Failed ');
                } else {
                     console.log('Success! ');
                     userStore = Ext.getStore('UserStore');
                     var jsonResponse = Ext.JSON.decode(response.responseText);
                     userStore.loadData(jsonResponse);
                }
            }
        });
        Ext.getCmp('reqFirstName').setValue(userStore.data.items[0].userFname);
        Ext.getCmp('reqLastName').setValue(userStore.data.items[0].userLname);
        Ext.getCmp('reqAddress1').setValue(userStore.data.items[0].userAddress1);
        Ext.getCmp('reqAddress2').setValue(userStore.data.items[0].userAddress2);
        Ext.getCmp('reqCountry').setValue(userStore.data.items[0].userCountry);
        Ext.getCmp('reqSp').setValue(userStore.data.items[0].userSp);
        Ext.getCmp('reqCity').setValue(userStore.data.items[0].userCity);
        Ext.getCmp('reqOccupation').setValue(userStore.data.items[0].userOccupation);
        Ext.getCmp('reqEmail').setValue(userStore.data.items[0].userEmail);

    }

});
