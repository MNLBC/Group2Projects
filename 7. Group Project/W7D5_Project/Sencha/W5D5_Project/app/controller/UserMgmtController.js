/*
 * File: app/controller/UserMgmtController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('W5D5_Project.controller.UserMgmtController', {
    extend: 'Ext.app.Controller',

    id: 'userMgmtController',

    refs: {
        userMgmtGrid: '#userMgmtGrid'
    },

    control: {
        "#userMgmtCreate": {
            click: 'onUserMgmtCreateClick'
        },
        "#userMgmtReset": {
            click: 'onUserMgmtResetClick'
        },
        "#userMgmtCountry": {
            change: 'onUserMgmtCountryChange'
        },
        "#userMgmtUpdate": {
            click: 'onUserMgmtUpdateClick'
        },
        "#userMgmtDelete": {
            click: 'onUserMgmtDeleteClick'
        },
        "#userMgmtGrid": {
            selectionchange: 'onUserMgmtGridSelectionChange'
        },
        "#userMgmtSearch": {
            change: 'onUserMgmtSearchChange'
        },
        "#userMgmtField1": {
            beforeadd: 'onUserMgmtField1BeforeAdd'
        },
        "#userMgmtField2": {
            beforeadd: 'onUserMgmtField2BeforeAdd'
        }
    },

    onUserMgmtCreateClick: function() {
        var controller = W5D5_Project.app.getController('UserMgmtController');
        var user = controller.getUserFormValues();

        if (!(Ext.getCmp('userMgmtField1').isValid() || Ext.getCmp('userMgmtField2').isValid())) {
            Ext.Msg.alert('Create User', "Please fill out required fields");
            return;
        } else {
            Ext.Ajax.request({
                url : "getUserByEmail",
                method : "GET",
                async : false,
                params : {
                    email : user.userEmail
                },
                callback : function(options, success, response) {
                    if (!Ext.isEmpty(Ext.decode(response.responseText))) {
                        Ext.Msg.alert('Create User','Account with that email already exists.');
                    } else {
                        Ext.Ajax.request({
                            url : "register",
                            method : 'POST',
                            params : {
                                user : Ext.encode(user)
                            },
                            async : false,
                            jsonData : Ext.util.JSON.encode(user),
                            callback : function(options, success,response) {
                                if (Ext.isEmpty(response.responseText)) {
                                    Ext.Msg.alert('Create User','There is a problem with the registration. Please try again later');
                                } else {
                                    var resp = Ext.decode(response.responseText);
                                    if (resp.responseCode == '0') {
                                        Ext.Msg.alert('Create User','User "' + user.userEmail + '" successfully registered!');
                                        controller.userRefresh();
                                        controller.userResetFormValues();
                                    } else if (resp.responseCode == '999') {
                                        var msgs = '';
                                        Ext.each(resp.errors,function(error) {
                                            msgs = msgs + '<br>' + error.defaultMessage;
                                        });
                                        Ext.Msg.alert('Create User','Validation error. Please check the following: '+ msgs);
                                    } else {
                                        Ext.Msg.alert('Create User','There is a problem with the registration. Please try again later');
                                    }
                                }
                            }
                        });
                    }
                }
            });
        }
    },

    onUserMgmtResetClick: function() {
        var controller = W5D5_Project.app.getController('UserMgmtController');
        controller.userResetFormValues();
        var pass = Ext.getCmp('userMgmtPass');
        pass.setReadOnly(false);
    },

    onUserMgmtCountryChange: function() {
        var state = Ext.getStore('SPStore');
        var country = Ext.getCmp('userMgmtCountry').value;
        state.filter('CountryName', country);
    },

    onUserMgmtUpdateClick: function() {
        var id = Ext.getCmp('userMgmtId').getValue();
        var fname = Ext.getCmp('userMgmtFname').getValue();
        var lname = Ext.getCmp('userMgmtLname').getValue();
        var email = Ext.getCmp('userMgmtEmail').getValue();
        var address1 = Ext.getCmp('userMgmtAdd1').getValue();
        var address2 = Ext.getCmp('userMgmtAdd2').getValue();
        var city = Ext.getCmp('userMgmtCity').getValue();
        var sp = Ext.getCmp('userMgmtSp').getValue();
        var country = Ext.getCmp('userMgmtCountry').getValue();
        var pass = Ext.getCmp('userMgmtPass').getValue();
        var occupation = Ext.getCmp('userMgmtOccup').getValue();
        var userLevel = Ext.getCmp('userMgmtLevel').getValue();
        var accountType = Ext.getCmp('userMgmtType').getValue();
        var field1 = Ext.getCmp('userMgmtField1');
        var field2 = Ext.getCmp('userMgmtField2');
        var controller = W5D5_Project.app.getController('UserMgmtController');
        var user;

        if(Ext.isEmpty(id)){
            Ext.Msg.show({
             title:'',
             msg: 'Please select a record to update.',
             buttons: Ext.Msg.OK,
             icon: Ext.Msg.WARNING
           });
        } else {
            if(field1.isValid() && field2.isValid()){
            user = {
                "userId":id,
                "userFname":fname,
                "userLname":lname,
                "userEmail":email,
                "userPass":pass,
                "userOccupation":occupation,
                "userAddress1":address1,
                "userAddress2":address2,
                "userCity":city,
                "userSp":sp,
                "userCountry":country,
                "userType":accountType,
                "userLevel":userLevel
            };
            Ext.Ajax.request({
                url : "updateUserByAdmin",
                method: 'POST',
                params : {
                    user: Ext.encode(user)
                },
                async: false,
                jsonData: Ext.util.JSON.encode(user),
                callback : function(options, success, response){
                    if(response.responseText===''){
                        Ext.Msg.alert("Update User", "Error encountered in updating user.");
                    }else {
                        Ext.Msg.alert("Update User", "User information successfully updated.");
                        Ext.getCmp('userField').setValue(user.userFname);
                        Ext.getCmp('idField').setValue(user.userId);
                        if(Ext.isEmpty(user.userAddress2)){
                            Ext.getCmp('addField').setValue(user.userAddress1 + ', ' + user.userCity + ', ' + user.userSp + ', ' + user.userCountry);
                        }else{
                            Ext.getCmp('addField').setValue(user.userAddress1 + ', ' + user.userAddress2 + ', ' + user.userCity + ', ' + user.userSp + ', ' + user.userCountry);
                        }
                        Ext.getCmp('emailField').setValue(user.userEmail);
                        Ext.getCmp('levelField').setValue(user.userLevel);
                        controller.userRefresh();
                        controller.userResetFormValues();
                    }
                }
            });
        }else{
            Ext.Msg.alert("Update User", "Validation error. Please check the field values.");
        }
        }
    },

    onUserMgmtDeleteClick: function() {
        var controller = W5D5_Project.app.getController('UserMgmtController');
        var store = Ext.getStore('UserStore');
        var id = Ext.getCmp('userMgmtId').getValue();
        var record = '';
        if(Ext.isEmpty(id)){
            Ext.Msg.show({
             title:'',
             msg: 'Please select a record to delete.',
             buttons: Ext.Msg.OK,
             icon: Ext.Msg.WARNING
           });
        }else{
            Ext.each(store.data.items, function(rec){
               if(rec.data.userId == id){
               record = rec;
            }
         });
            if(!Ext.isEmpty(record)){
             Ext.Ajax.request({
                url : 'deleteUser',
                method : 'POST',
                params : {
                    id : id
                },
                callback : function(options, success, response){
                    if(!Ext.isEmpty(response.responseText)){
                        console.log("success!");
                    }
                }
            });
            store.remove(record);
            Ext.Msg.alert('Success', 'User successfully deleted');
            controller.userRefresh();
        }
        controller.userResetFormValues();
        }
    },

    onUserMgmtGridSelectionChange: function(model, selected, eOpts) {
             if(!Ext.isEmpty(selected)){
                 Ext.getCmp('userMgmtId').setValue(selected[0].data.userId);
                 Ext.getCmp('userMgmtFname').setValue(selected[0].data.userFname);
                 Ext.getCmp('userMgmtLname').setValue(selected[0].data.userLname);
                 Ext.getCmp('userMgmtAdd1').setValue(selected[0].data.userAddress1);
                 Ext.getCmp('userMgmtAdd2').setValue(selected[0].data.userAddress2);
                 Ext.getCmp('userMgmtCountry').setValue(selected[0].data.userCountry);
                 Ext.getCmp('userMgmtSp').setValue(selected[0].data.userSp);
                 Ext.getCmp('userMgmtCity').setValue(selected[0].data.userCity);
                 Ext.getCmp('userMgmtOccup').setValue(selected[0].data.userOccupation);
                 Ext.getCmp('userMgmtEmail').setValue(selected[0].data.userEmail);
                 Ext.getCmp('userMgmtPass').setValue(selected[0].data.userPass);
                 var userMgmtLevel = Ext.getCmp('userMgmtLevel');
                 userMgmtLevel.select(userMgmtLevel.store.data.items[selected[0].data.userLevel-1]);
                 Ext.getCmp('userMgmtType').setValue(selected[0].data.userType);
                 var pass = Ext.getCmp('userMgmtPass');
                 pass.setReadOnly(true);
                }else{
                    var controller = W5D5_Project.app.getController('UserMgmtController');
                    controller.userResetFormValues();
                }
    },

    onUserMgmtSearchChange: function() {
        var searchVal = Ext.getCmp('userMgmtSearch').getValue();
        var store = Ext.getStore('UserStore');
        if(Ext.isEmpty(searchVal)){
            store.clearFilter();
        }else{
            store.filter('userEmail', searchVal);
        }
    },

    onUserMgmtField1BeforeAdd: function(me, field) {
        if (!field.allowBlank){
            field.labelSeparator += '<span style="color: rgb(255, 0, 0); padding-left: 2px;">*</span>';
        }
    },

    onUserMgmtField2BeforeAdd: function(me, field) {
        if (!field.allowBlank){
            field.labelSeparator += '<span style="color: rgb(255, 0, 0); padding-left: 2px;">*</span>';
        }
    },

    getUserFormValues: function() {

        var userFname = Ext.getCmp('userMgmtFname').getValue();
        var userLname = Ext.getCmp('userMgmtLname').getValue();
        var userEmail = Ext.getCmp('userMgmtEmail').getValue();
        var userPass = Ext.getCmp('userMgmtPass').getValue();
        var userAddress1 = Ext.getCmp('userMgmtAdd1').getValue();
        var userAddress2 = Ext.getCmp('userMgmtAdd2').getValue();
        var userLevel = Ext.getCmp('userMgmtLevel').getValue();
        var userOccup = Ext.getCmp('userMgmtOccup').getValue();
        var userCity = Ext.getCmp('userMgmtCity').getValue();
        var userSp = Ext.getCmp('userMgmtSp').getValue();
        var userCountry = Ext.getCmp('userMgmtCountry').getValue();
        var userType = Ext.getCmp('userMgmtType').getValue();

        var user = {
            "userId":'',
            "userFname":userFname,
            "userLname":userLname,
            "userEmail":userEmail,
            "userAddress1":userAddress1,
            "userAddress2":userAddress2,
            "userPass":userPass,
            "userCity":userCity,
            "userSp":userSp,
            "userCountry":userCountry,
            "userLevel":userLevel,
            "userOccupation":userOccup,
            "userType":userType
        };

        return user;
    },

    userResetFormValues: function() {
          Ext.getCmp('userMgmtId').setValue('');
          Ext.getCmp('userMgmtFname').setValue('');
          Ext.getCmp('userMgmtLname').setValue('');
          Ext.getCmp('userMgmtEmail').setValue('');
          Ext.getCmp('userMgmtAdd1').setValue('');
          Ext.getCmp('userMgmtAdd2').setValue('');
          Ext.getCmp('userMgmtCity').setValue('');
          Ext.getCmp('userMgmtSp').setValue('');
          Ext.getCmp('userMgmtCountry').setValue('');
          Ext.getCmp('userMgmtPass').setValue('');
          Ext.getCmp('userMgmtType').setValue('');
          Ext.getCmp('userMgmtLevel').setValue('');
          Ext.getCmp('userMgmtOccup').setValue('');
          Ext.getCmp('userMgmtSearch').setValue('');
          Ext.getStore('UserStore').clearFilter();
    },

    userRefresh: function() {
        Ext.Ajax.request({
            url : "getAllUsers",
            method : "GET",
            async : false,
            callback : function(options,success,response){
                if (Ext.isEmpty(response.responseText)) {
                    Ext.Msg.alert("Users",
                                  "Error in getting users");
                } else {
                    var userStore = Ext.getStore('UserStore');
                    var jsonResponse = Ext.JSON.decode(response.responseText);
                    userStore.loadData(jsonResponse);
                }
            }
        });
    }

});
