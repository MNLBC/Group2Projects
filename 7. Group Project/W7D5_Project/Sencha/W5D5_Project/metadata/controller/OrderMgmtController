{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "OrderMgmtController"
    },
    "name": "MyController",
    "designerId": "da43a20b-6c73-47ee-89bc-7516ede9b276",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#adminOrderMgmtBtn",
                "designer|targetType": "Ext.button.Button",
                "fn": "onOrderMgmtClick",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url : \"getOrders\",",
                    "    method : \"GET\",",
                    "    async : false,",
                    "    callback : function(options,success,response){",
                    "        if (Ext.isEmpty(response.responseText)) {",
                    "            Ext.Msg.alert(\"Orders\",",
                    "                          \"Error in retrieving orders\");",
                    "        } else {",
                    "            var orderStore = Ext.getStore('OrdersStore');",
                    "            var jsonResponse = Ext.JSON.decode(response.responseText);",
                    "            orderStore.loadData(jsonResponse);",
                    "        }",
                    "    }",
                    "});",
                    "Ext.getCmp('orderMgmtGrid').getView().refresh();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onOrderMgmtClick",
            "designerId": "22e1859e-173e-414d-8236-3c54376a40b7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#orderMgmtGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onOrderMgmtGridSelect",
                "implHandler": [
                    "var selected;",
                    "this.selected = selected;",
                    "",
                    "if(Ext.isEmpty(selected)){",
                    "    Ext.getCmp('orderMgmtId').setValue('');",
                    "    Ext.getCmp('orderMgmtUserId').setValue('');",
                    "    Ext.getCmp('orderMgmtTotal').setValue('');",
                    "    Ext.getCmp('orderMgmtDate').setValue('');",
                    "    Ext.getCmp('orderMgmtSearch').setValue('');",
                    "    return;",
                    "}",
                    "",
                    "Ext.getCmp('orderMgmtId').setValue(selected[0].data.orderId);",
                    "Ext.getCmp('orderMgmtUserId').setValue(selected[0].data.userId);",
                    "Ext.getCmp('orderMgmtTotal').setValue(selected[0].data.orderTotal);",
                    "var date1 = selected[0].data.orderDate;",
                    "var date2 = new Date(date1.substr(0,4)+'-'+date1.substr(4,2)+'-'+date1.substr(6,2));",
                    "Ext.getCmp('orderMgmtDate').setValue(date2);",
                    ""
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "onOrderMgmtGridSelect",
            "designerId": "62d6437f-1477-47cd-a106-d84760d8bc6a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#orderMgmtSearch",
                "designer|targetType": "Ext.form.field.Text",
                "fn": "onOrderMgmtSearchChange",
                "implHandler": [
                    "var orderId, orderStore;",
                    "        orderId = Ext.getCmp('orderMgmtSearch').getValue();",
                    "        orderStore = Ext.getStore('OrdersStore');",
                    "",
                    "        if(Ext.isEmpty(orderId)){",
                    "            orderStore.clearFilter();",
                    "        } else{",
                    "            orderStore.filter('orderId',orderId);",
                    "        }"
                ],
                "name": "change",
                "scope": "me"
            },
            "name": "onOrderMgmtSearchChange",
            "designerId": "b1d57e48-6b92-4673-8ec4-a2f5768e46a7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#orderMgmtReset",
                "designer|targetType": "Ext.button.Button",
                "fn": "onOrderMgmtResetClick",
                "implHandler": [
                    "Ext.getCmp('orderMgmtId').setValue('');",
                    "Ext.getCmp('orderMgmtUserId').setValue('');",
                    "Ext.getCmp('orderMgmtTotal').setValue('');",
                    "Ext.getCmp('orderMgmtDate').setValue('');",
                    "Ext.getCmp('orderMgmtSearch').setValue('');"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onOrderMgmtResetClick",
            "designerId": "a2dd14ec-4547-41da-b3f5-18648f8475ed"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#orderMgmtDelete",
                "designer|targetType": "Ext.button.Button",
                "fn": "onOrderMgmtDeleteClick",
                "implHandler": [
                    "if(Ext.isEmpty(Ext.getCmp('orderMgmtGrid').getSelectionModel().selected.items[0])){",
                    "    Ext.Msg.alert('Order Management','Please select a record to delete.');",
                    "}",
                    "",
                    "var orderId, store;",
                    "orderId = Ext.getCmp('orderMgmtGrid').getSelectionModel().selected.items[0].data.orderId;",
                    "store = Ext.getStore('OrdersStore');",
                    "",
                    "Ext.each(store.data.items, function(record){",
                    "    if(orderId == record.data.orderId){",
                    "        Ext.Msg.alert('Success', 'Record successfully deleted!');",
                    "        Ext.getCmp('orderMgmtId').setValue('');",
                    "        Ext.getCmp('orderMgmtUserId').setValue('');",
                    "        Ext.getCmp('orderMgmtTotal').setValue('');",
                    "        Ext.getCmp('orderMgmtDate').setValue('');",
                    "        Ext.Ajax.request({",
                    "            url : \"deleteOrderById\",",
                    "            method : \"POST\",",
                    "            async : false,",
                    "            params : {",
                    "                orderId: orderId",
                    "            },",
                    "            callback : function(options,success,response){",
                    "                if (Ext.isEmpty(response.responseText)) {",
                    "                    Ext.Msg.alert(\"Orders\",",
                    "                                  \"Error in deleting orders\");",
                    "                } else {",
                    "                    Ext.Msg.alert(\"Orders\",\"Order Deleted!\");",
                    "                    Ext.Ajax.request({",
                    "                        url : \"getOrders\",",
                    "                        method : \"GET\",",
                    "                        async : false,",
                    "                        callback : function(options,success,response){",
                    "                            if (Ext.isEmpty(response.responseText)) {",
                    "                                Ext.Msg.alert(\"Orders\",",
                    "                                              \"Error in retrieving orders\");",
                    "                            } else {",
                    "                                var orderStore = Ext.getStore('OrdersStore');",
                    "                                var jsonResponse = Ext.JSON.decode(response.responseText);",
                    "                                orderStore.loadData(jsonResponse);",
                    "                            }",
                    "                        }",
                    "                    });",
                    "                    Ext.getCmp('orderMgmtGrid').getView().refresh();",
                    "                }",
                    "            }",
                    "        });",
                    "        Ext.getCmp('orderMgmtGrid').getView().refresh();",
                    "    }",
                    "});"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onOrderMgmtDeleteClick",
            "designerId": "c855a2fc-7a64-4980-9164-aa7e1bef4635"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#orderMgmtCreate",
                "designer|targetType": "Ext.button.Button",
                "fn": "onOrderMgmtCreateClick",
                "implHandler": [
                    "if(!Ext.getCmp('orderMgmtField1').isValid()||!Ext.getCmp('orderMgmtField2').isValid()){",
                    "    Ext.Msg.alert('Order Management','Validation error. Please check field values.');",
                    "}",
                    "",
                    "var userId,orderTotal,orderDate,orderDate2,orderStore;",
                    "userId = Ext.getCmp('orderMgmtUserId').getValue();",
                    "orderTotal = Ext.getCmp('orderMgmtTotal').getValue();",
                    "orderDate = Ext.getCmp('orderMgmtDate').getValue();",
                    "orderStore = Ext.getStore('OrdersStore');",
                    "orderDate2 = Ext.Date.format(orderDate,'Ymdhis');",
                    "",
                    "if(userId !== \"\"){",
                    "var orderObj = {",
                    "    orderId : 0,",
                    "    userId : userId,",
                    "    orderTotal : orderTotal,",
                    "    orderDate : orderDate2 + '.000'",
                    "};",
                    "Ext.Ajax.request({",
                    "    url : \"createOrder\",",
                    "    method : \"POST\",",
                    "    async : false,",
                    "    params : {",
                    "        order : Ext.encode(orderObj)",
                    "    },",
                    "    jsonData: Ext.util.JSON.encode(orderObj),",
                    "    callback : function(options,success,response){",
                    "        if (Ext.isEmpty(response.responseText)) {",
                    "            Ext.Msg.alert(\"Orders\",\"Error in retrieving orders\");",
                    "        } else {",
                    "            Ext.Msg.alert(\"Orders\",\"Order Created!\");",
                    "            Ext.Ajax.request({",
                    "                url : \"getOrders\",",
                    "                method : \"GET\",",
                    "                async : false,",
                    "                callback : function(options,success,response){",
                    "                    if (Ext.isEmpty(response.responseText)) {",
                    "                        Ext.Msg.alert(\"Orders\",\"Error in retrieving orders\");",
                    "                    } else {",
                    "                        var orderStore1 = Ext.getStore('OrdersStore');",
                    "                        var jsonResponse = Ext.JSON.decode(response.responseText);",
                    "                        orderStore1.loadData(jsonResponse);",
                    "                    }",
                    "                }",
                    "            });",
                    "            Ext.getCmp('orderMgmtGrid').getView().refresh();",
                    "            Ext.getCmp('orderMgmtId').setValue('');",
                    "            Ext.getCmp('orderMgmtUserId').setValue('');",
                    "            Ext.getCmp('orderMgmtTotal').setValue('');",
                    "            Ext.getCmp('orderMgmtDate').setValue('');",
                    "        }",
                    "    }",
                    "});",
                    "} else{",
                    "    Ext.Msg.alert(\"Orders\",\"USERID must have a value\");",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onOrderMgmtCreateClick",
            "designerId": "986308f3-3781-4000-bf5b-92d93193fbda"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#orderMgmtUpdate",
                "designer|targetType": "Ext.button.Button",
                "fn": "onOrderMgmtUpdateClick",
                "implHandler": [
                    "if(Ext.isEmpty(Ext.getCmp('orderMgmtGrid').getSelectionModel().selected.items[0])){",
                    "    Ext.Msg.alert('Order Management','Please select a record to update.');",
                    "}else if(!Ext.getCmp('orderMgmtField1').isValid()||!Ext.getCmp('orderMgmtField2').isValid()){",
                    "    Ext.Msg.alert('Order Management','Validation error. Please check field values.');",
                    "}",
                    "",
                    "var orderId,userId,orderTotal,orderDate,orderDate2,orderStore;",
                    "orderId = Ext.getCmp('orderMgmtGrid').getSelectionModel().selected.items[0].data.orderId;",
                    "userId = Ext.getCmp('orderMgmtUserId').getValue();",
                    "orderTotal = Ext.getCmp('orderMgmtTotal').getValue();",
                    "orderDate = Ext.getCmp('orderMgmtDate').getValue();",
                    "orderStore = Ext.getStore('OrdersStore');",
                    "orderDate2 = Ext.Date.format(orderDate,'Ymdhis');",
                    "",
                    "if(userId !== \"\"){",
                    "Ext.each(orderStore.data.items, function(record){",
                    "           if(orderId == record.data.orderId){",
                    "               var orderObj = {",
                    "                   orderId : orderId,",
                    "                   userId : userId,",
                    "                   orderTotal : orderTotal,",
                    "                   orderDate : orderDate2 + '.000'",
                    "               };",
                    "               Ext.Ajax.request({",
                    "                    url : \"updateOrder\",",
                    "                    method : \"POST\",",
                    "                    async : false,",
                    "                    params : {",
                    "                        order : Ext.encode(orderObj)",
                    "                    },",
                    "                   jsonData: Ext.util.JSON.encode(orderObj),",
                    "                    callback : function(options,success,response){",
                    "                        if (Ext.isEmpty(response.responseText)) {",
                    "                            Ext.Msg.alert(\"Orders\",\"Error in updating orders\");",
                    "                        } else {",
                    "                            Ext.Msg.alert(\"Orders\",\"Order Updated!\");",
                    "                            Ext.Ajax.request({",
                    "                                url : \"getOrders\",",
                    "                                method : \"GET\",",
                    "                                async : false,",
                    "                                callback : function(options,success,response){",
                    "                                    if (Ext.isEmpty(response.responseText)) {",
                    "                                        Ext.Msg.alert(\"Orders\",\"Error in retrieving orders\");",
                    "                                    } else {",
                    "                                        var orderStore1 = Ext.getStore('OrdersStore');",
                    "                                        var jsonResponse = Ext.JSON.decode(response.responseText);",
                    "                                        orderStore1.loadData(jsonResponse);",
                    "                                    }",
                    "                                }",
                    "                            });",
                    "                        }",
                    "                    }",
                    "               });",
                    "           }",
                    "});",
                    "Ext.getCmp('orderMgmtGrid').getView().refresh();",
                    "} else{",
                    "    Ext.Msg.alert(\"Orders\",\"USERID must have a value\");",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onOrderMgmtUpdateClick",
            "designerId": "38a515cc-b4cf-4f74-bd26-efa376538460"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#orderMgmtGrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onOrderMgmtGridDblClick",
                "implHandler": [
                    "var orderId;",
                    "orderId = Ext.getCmp('orderMgmtGrid').getSelectionModel().selected.items[0].data.orderId;",
                    "",
                    "if(Ext.isEmpty(this.cartProdWindow)){",
                    "    this.orderProductWindow = Ext.create('W5D5_Project.view.OrderProductWin');",
                    "}",
                    "",
                    "Ext.Ajax.request({",
                    "    url : \"getOrderProductsByOrder\",",
                    "    method : \"GET\",",
                    "    async : false,",
                    "    params :{",
                    "        id : orderId",
                    "    },",
                    "    callback : function(options,success,response){",
                    "        if (success=='false') {",
                    "            Ext.Msg.alert(\"Orders\",\"Error in retrieving orders\");",
                    "        } else {",
                    "            var orderStore1 = Ext.getStore('OrdersStore');",
                    "            var jsonResponse = Ext.JSON.decode(response.responseText);",
                    "            orderStore1.loadData(jsonResponse);",
                    "            this.orderProductWindow.show();",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "Ext.getCmp('orderProdWin').getView().refresh();"
                ],
                "name": "rowdblclick",
                "scope": "me"
            },
            "name": "onOrderMgmtGridDblClick",
            "designerId": "9a0aadcf-6655-400e-90a1-279c0afb5616"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#orderMgmtField1",
                "designer|params": [
                    "me, field"
                ],
                "designer|targetType": "MyForm5",
                "fn": "onOrderMgmtField1BeforeAdd",
                "implHandler": [
                    "if (!field.allowBlank){",
                    "    field.labelSeparator += '<span style=\"color: rgb(255, 0, 0); padding-left: 2px;\">*</span>';",
                    "}"
                ],
                "name": "beforeadd",
                "scope": "me"
            },
            "name": "onOrderMgmtField1BeforeAdd",
            "designerId": "7119f05f-e6e3-4fdd-8843-309d087a63dc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#orderMgmtField2",
                "designer|params": [
                    "me, field"
                ],
                "designer|targetType": "MyForm7",
                "fn": "onOrderMgmtField2BeforeAdd",
                "implHandler": [
                    "if (!field.allowBlank){",
                    "    field.labelSeparator += '<span style=\"color: rgb(255, 0, 0); padding-left: 2px;\">*</span>';",
                    "}"
                ],
                "name": "beforeadd",
                "scope": "me"
            },
            "name": "onOrderMgmtField2BeforeAdd",
            "designerId": "985e66f9-d7b1-411c-abce-3632bbb12c6d"
        }
    ]
}