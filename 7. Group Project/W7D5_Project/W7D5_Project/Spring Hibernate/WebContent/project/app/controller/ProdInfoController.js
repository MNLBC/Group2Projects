/*
 * File: app/controller/ProdInfoController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('W5D5_Project.controller.ProdInfoController', {
    extend: 'Ext.app.Controller',

    control: {
        "#prodInfoCartBtn": {
            click: 'onProdInfoCartBtnClick'
        },
        "#prodInfoPostBtn": {
            click: 'onProdInfoPostBtnClick'
        },
        "#prodInfoUpdateBtn": {
            click: 'onProdInfoUpdateBtnClick'
        },
        "#prodInfoRemoveBtn": {
            click: 'onProdInfoRemoveBtnClick'
        }
    },

    onProdInfoCartBtnClick: function() {
        var store = Ext.getStore('CartProductStore'),
            record = this.recordData,
            isExists = false,
            cartCount = Ext.getCmp('cartCount');
        Ext.each(store.data.items,function(rec){
            if(rec.data.prodId==record.prodId){
                rec.data.prodQty=parseInt(rec.data.prodQty)+1;
                rec.data.prodSubtotal=rec.data.prodSubtotal+rec.data.prodPrice;
                isExists = true;
                record=rec.data;
                Ext.getCmp('cartProductGrid').getView().refresh();
            }
        });
        if(!isExists){
            record.cartprodId='';
            record.prodQty=1;
            store.add(record);
        }
        Ext.Msg.alert('Status', 'Added item to cart');
        console.log(store);
        Ext.Ajax.request({
            url : 'addToCart',
            method : 'POST',
            params : {
                userId: Ext.getCmp('idField').getValue(),
                prodId: record.prodId,
                prodName: record.prodName,
                prodCat: record.prodCat,
                prodDesc: record.prodDesc,
                prodPrice: record.prodPrice,
                prodSale: record.prodSale,
                prodStock: record.prodStock,
                prodImg: record.prodImg,
                prodQty: record.prodQty,
                prodSubtotal: record.prodSubtotal
            },
            callback : function(options, success, response){
                if(!Ext.isEmpty(response.responseText)){
                    console.log("success!");
                }
            }
        });

        var controller = W5D5_Project.app.getController('ProdInfoController');
        controller.hideProdInfoWin();
    },

    onProdInfoPostBtnClick: function() {
        var review = {
            reviewId : '',
            productId : Ext.getCmp('prodInfoId').getValue(),
            email : Ext.getCmp('emailField').getValue(),
            review : Ext.getCmp('prodInfoReview').getValue(),
            rating : Ext.getCmp('prodInfoRating').getValue(),
            date : new Date()
        };

        if(!Ext.getCmp('prodInfoReviewBody').isValid()){
            Ext.Msg.alert('Product Review', 'Please fill out rating and review.');
            return;
        }

        Ext.Ajax.request({
            url : 'addProductReview',
            method : 'POST',
            params : {
                review : Ext.encode(review)
            },
            jsonData : Ext.util.JSON.encode(review),
            async : false,
            callback : function(options, success, response){
                if(Ext.isEmpty(response.responseText) || response.responseText == 'false'){
                    Ext.Msg.alert('Product Review', 'Error in posting product review.');
                }else{
                    Ext.Msg.alert('Product Review', 'Successfully posted product review.');
                    var controller = W5D5_Project.app.getController('ProdInfoController');
                    controller.getProductReviews();
                }
            }
        });
    },

    onProdInfoUpdateBtnClick: function() {

    },

    onProdInfoRemoveBtnClick: function() {

        var prodReviewStore = Ext.getStore('ProdReviewStore'),
            reviewId = 0,
            email = Ext.getCmp('emailField');
        Ext.each(prodReviewStore.data.items, function(rec){
           if(rec.data.email == email.getValue()){
               reviewId = rec.data.reviewId;
           }
        });

        Ext.Ajax.request({
            url : 'removeProductReview',
            method : 'POST',
            params : {
                id : reviewId
            },
            async : false,
            callback : function(options, success, response){
                if(Ext.isEmpty(response.responseText) || response.responseText == 'false'){
                    Ext.Msg.alert('Product Review', 'Error in removing product review.');
                }else{
                    Ext.Msg.alert('Product Review', 'Successfully removed product review.');
                    var controller = W5D5_Project.app.getController('ProdInfoController');
                    controller.getProductReviews();
                }
            }
        });

    },

    showProdInfoWin: function(record) {
        this.recordData = record;
        if(Ext.isEmpty(this.prodInfoWin)){
            this.prodInfoWin = Ext.create('W5D5_Project.view.ProdInfoWin');
        }
        Ext.getCmp('prodInfoImg').setSrc('resources/img/' + record.prodImg + '.png');
        Ext.getCmp('prodInfoId').setValue(record.prodId);
        Ext.getCmp('prodInfoName').setValue(record.prodName);
        Ext.getCmp('prodInfoCat').setValue(record.prodCat);
        Ext.getCmp('prodInfoDesc').setValue(record.prodDesc);
        if(record.prodSale!=1){
            Ext.getCmp('prodInfoPrice').setValue(record.prodPrice * record.prodSale);
        }else{
            Ext.getCmp('prodInfoPrice').setValue(record.prodPrice);
        }


        Ext.Ajax.request({
            url : 'getProductReviewByProduct',
            method : 'POST',
            params : {
                productId : record.prodId
            },
            async : false,
            callback : function(options, success, response){
                if(Ext.isEmpty(response.responseText)){
                    Ext.Msg.alert('Product Review', 'Error in retrieving product review.');
                }else{
                    var prodReviewStore = Ext.getStore('ProdReviewStore');
                    var jsonResponse = Ext.JSON.decode(response.responseText),
                        review = '',
                        email = Ext.getCmp('emailField'),
                        average = 0;
                    prodReviewStore.loadData(jsonResponse);
                    Ext.each(prodReviewStore.data.items, function(rec){
                       if(rec.data.email == email.getValue()){
                           review = rec;
                       }
                       average += parseInt(rec.data.rating);
                    });
                    if(average!='0'){
                       average = average / prodReviewStore.data.items.length;
                       Ext.getCmp('prodInfoAveRating').setValue(average);
                    }else{
                       Ext.getCmp('prodInfoAveRating').setValue('Not Yet Rated');
                    }
                    if(!Ext.isEmpty(review)){
                       switch(review.data.rating){
                           case(1) : Ext.getCmp('prodInfoRating').setValue('1 - Poor'); break;
                           case(2) : Ext.getCmp('prodInfoRating').setValue('2 - Fair'); break;
                           case(3) : Ext.getCmp('prodInfoRating').setValue('3 - Good'); break;
                           case(4) : Ext.getCmp('prodInfoRating').setValue('4 - Very Good'); break;
                           case(5) : Ext.getCmp('prodInfoRating').setValue('5 - Excellent'); break;
                       }
                       Ext.getCmp('prodInfoReview').setValue(review.data.review);
                       Ext.getCmp('prodInfoPostBtn').disable();
                       Ext.getCmp('prodInfoRemoveBtn').enable();
                    }else{
                       Ext.getCmp('prodInfoRating').setValue('');
                       Ext.getCmp('prodInfoReview').setValue('');
                       Ext.getCmp('prodInfoPostBtn').enable();
                       Ext.getCmp('prodInfoRemoveBtn').disable();
                    }
                }
            }
        });

        this.prodInfoWin.show();
    },

    hideProdInfoWin: function() {
        if(!Ext.isEmpty(this.prodInfoWin)){
            this.prodInfoWin.hide();
        }
    },

    getProductReviews: function() {
        record = this.recordData;

        Ext.Ajax.request({
            url : 'getProductReviewByProduct',
            method : 'POST',
            params : {
                productId : record.prodId
            },
            async : false,
            callback : function(options, success, response){
                if(Ext.isEmpty(response.responseText)){
                    Ext.Msg.alert('Product Review', 'Error in retrieving product review.');
                }else{
                    var prodReviewStore = Ext.getStore('ProdReviewStore');
                    var jsonResponse = Ext.JSON.decode(response.responseText),
                        review = '',
                        email = Ext.getCmp('emailField'),
                        average = 0;
                    prodReviewStore.loadData(jsonResponse);
                    Ext.each(prodReviewStore.data.items, function(rec){
                       if(rec.data.email == email.getValue()){
                           review = rec;
                       }
                       average += parseInt(rec.data.rating);
                    });
                    if(average!='0'){
                       average = average / prodReviewStore.data.items.length;
                       Ext.getCmp('prodInfoAveRating').setValue(average);
                    }else{
                       Ext.getCmp('prodInfoAveRating').setValue('Not Yet Rated');
                    }
                    if(!Ext.isEmpty(review)){
                       Ext.getCmp('prodInfoRating').setValue(review.data.rating);
                       Ext.getCmp('prodInfoReview').setValue(review.data.review);
                       Ext.getCmp('prodInfoPostBtn').disable();
                       Ext.getCmp('prodInfoRemoveBtn').enable();
                    }else{
                       Ext.getCmp('prodInfoRating').setValue('');
                       Ext.getCmp('prodInfoReview').setValue('');
                       Ext.getCmp('prodInfoPostBtn').enable();
                       Ext.getCmp('prodInfoRemoveBtn').disable();
                    }
                }
            }
        });
    }

});
